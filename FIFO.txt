FIFO
 
 
module async_fifo(
input wclk,rclk,reset,
input w_enable,r_enable,
input [7:0]wdata,
output reg[7:0]rdata,
output full_flag,empty_flag);
parameter FIFO_DEPTH=16, POINTER=4;
reg[7:0]fifo[0:FIFO_DEPTH-1];
reg[POINTER:0]wpointer,rpointer,wpointer_sync,rpointer_sync,Qr,Qw;
 
assign full_flag = (({~wpointer[POINTER],wpointer[POINTER-1:0]}==rpointer_sync[POINTER:0]))?1:0;
assign empty_flag = (wpointer_sync == rpointer)?1:0;
 
//write
always@(posedge wclk,posedge reset)
begin
	if(reset==1)
	begin	
		wpointer <= 0;
	end
	else
	begin
	if(w_enable==1 && full_flag != 1)
	begin
		fifo[wpointer[POINTER-1:0]] <= wdata;
		wpointer <= wpointer+1;
	end
	end
end
 
//read
always@(posedge rclk,posedge reset)
begin
	if(reset==1)
	begin
		rpointer <= 0;
	end
	else
	begin
	if(r_enable == 1 && empty_flag != 1)
	begin
		rdata <= fifo[rpointer[POINTER-1:0]];
		rpointer <= rpointer+1;
	end
	end
end
 
//wr_ptr Synchronization for read side
 
always@(posedge rclk,posedge reset)
begin
	if(reset==1)
	begin
		Qw <= 0;
		wpointer_sync <= 0;
	end
	else
	begin
		Qw <= wpointer;
		wpointer_sync <= Qw;
	end
end
 
//rd_ptr Synchronization
always@(posedge wclk,posedge reset)
begin
	if(reset==1)
	begin
		Qr <= 0;
		rpointer_sync <= 0;
	end
	else
	begin
		Qr <= rpointer;
		rpointer_sync <= Qr;
	end
	end
endmodule
 
 
module async_fifo_tb;
parameter FIFO_DEPTH=16,POINTER=4;
reg wclk_t,rclk_t,reset_t;
reg wenable_t,renable_t;
reg[7:0]wdata_t,data_in;
wire[7:0]rdata_t;
wire full_flag_t,empty_flag_t;
integer count;
 
async_fifo #(FIFO_DEPTH,POINTER)async_inst(wclk_t,rclk_t,reset_t,wenable_t,renable_t,wdata_t,rdata_t,full_flag_t,empty_flag_t);
 
 
//write task
task write_task;
input[7:0]data_in;
begin
	@(posedge wclk_t);
	if(!full_flag_t)
	begin
	wenable_t = 1;
	wdata_t = data_in;
	@(posedge wclk_t);
	wenable_t = 0;
	end
end
endtask
 
//read task
 
task read_task;
begin
	@(posedge rclk_t);
	if(!empty_flag_t)
	begin
	renable_t = 1;
	@(posedge rclk_t);
	renable_t = 0;
	end
end
endtask
 
//single_wr_rd_test
 
task single_wr_rd_test();
begin
data_in = $random;
write_task(data_in);
read_task();
end
endtask
 
//all_wr_rd_test
task all_wr_rd_test();
for(count=0;count < FIFO_DEPTH; count=count+1)
begin
	data_in = $random;
	write_task(data_in);
	read_task();
end
endtask
 
//fifo full and empty case
task fifo_full_empty_test();
begin
for(count =0;count < FIFO_DEPTH+1;count=count+1)
begin
	data_in = $random;
	write_task(data_in);
end
for(count=0; count < FIFO_DEPTH+1;count=count+1)
begin
	read_task();
end
end
endtask
 
//wclk clock gen
always
begin
#5 wclk_t = ~wclk_t;
end
 
//rclk clock gen
always 
begin
#5 rclk_t = ~rclk_t;
end
 
//reset and calling the task
initial
begin
	wclk_t = 0;
	rclk_t = 0;
	reset_t = 1;
	#15
	reset_t = 0;
	@(posedge wclk_t);
	single_wr_rd_test();
	all_wr_rd_test();
	fifo_full_empty_test();
	#100 $finish;
end
endmodule
 
 
 
 
Synchronous FIFO
 
module sync_fifo #(parameter DEPTH=8, DWIDTH=16)
(
        input               	rstn,               // Active low reset
                            	clk,                // Clock
                            	wr_en, 				// Write enable
                            	rd_en, 				// Read enable
        input      [DWIDTH-1:0] din, 				// Data written into FIFO
        output reg [DWIDTH-1:0] dout, 				// Data read from FIFO
        output              	empty, 				// FIFO is empty when high
                            	full 				// FIFO is full when high
);
 
 
  reg [$clog2(DEPTH)-1:0]   wptr;
  reg [$clog2(DEPTH)-1:0]   rptr;
 
  reg [DWIDTH-1 : 0]    fifo[DEPTH];
 
  always @ (posedge clk) begin
    if (!rstn) begin
      wptr <= 0;
    end else begin
      if (wr_en & !full) begin
        fifo[wptr] <= din;
        wptr <= wptr + 1;
      end
    end
  end
 
  initial begin
    $monitor("[%0t] [FIFO] wr_en=%0b din=0x%0h rd_en=%0b dout=0x%0h empty=%0b full=%0b",
             $time, wr_en, din, rd_en, dout, empty, full);
  end
 
  always @ (posedge clk) begin
    if (!rstn) begin
      rptr <= 0;
    end else begin
      if (rd_en & !empty) begin
        dout <= fifo[rptr];
        rptr <= rptr + 1;
      end
    end
  end
 
  assign full  = (wptr + 1) == rptr;
  assign empty = wptr == rptr;
endmodule
 
module tb;
 
  reg 	 		clk;
  reg [15:0]    din;
  wire [15:0] 	dout;
  reg [15:0] 	rdata;
  reg 			empty;
  reg 			rd_en;
  reg 			wr_en;
  wire 			full;
  reg 			rstn;
  reg 			stop;
 
  sync_fifo u_sync_fifo ( .rstn(rstn),
                         .wr_en(wr_en),
                         .rd_en(rd_en),
                         .clk(clk),
                         .din(din),
                         .dout(dout),
                         .empty(empty),
                         .full(full)
                        );
 
  always #10 clk <= ~clk;
 
  initial begin
    clk 	<= 0;
    rstn 	<= 0;
    wr_en 	<= 0;
    rd_en 	<= 0;
    stop  	<= 0;
 
    #50 rstn <= 1;
  end
 
  initial begin
    @(posedge clk);
 
    for (int i = 0; i < 20; i = i+1) begin
 
      // Wait until there is space in fifo
      while (full) begin
      	@(posedge clk);
        $display("[%0t] FIFO is full, wait for reads to happen", $time);
      end;
 
      // Drive new values into FIFO
      wr_en <= $random;
      din 	<= $random;
      $display("[%0t] clk i=%0d wr_en=%0d din=0x%0h ", $time, i, wr_en, din);
 
      // Wait for next clock edge
      @(posedge clk);
    end
 
    stop = 1;
  end
 
  initial begin
    @(posedge clk);
 
    while (!stop) begin
      // Wait until there is data in fifo
      while (empty) begin
        rd_en <= 0;
        $display("[%0t] FIFO is empty, wait for writes to happen", $time);
        @(posedge clk);
      end;
 
      // Sample new values from FIFO at random pace
      rd_en <= $random;
      @(posedge clk);
      rdata <= dout;
      $display("[%0t] clk rd_en=%0d rdata=0x%0h ", $time, rd_en, rdata);
    end
 
    #500 $finish;
  end
endmodule